import React, { useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, Dimensions, Alert } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Calendar, TrendingUp, Award, Clock, Brain, Activity, Coffee, Share2, ChartBar as BarChart3 } from 'lucide-react-native';

const { width } = Dimensions.get('window');

interface StatCard {
  title: string;
  value: string;
  subtitle: string;
  icon: any;
  color: string;
  gradient: string[];
  onPress?: () => void;
}

interface WeekData {
  day: string;
  cycles: number;
  maxCycles: number;
}

const weekData: WeekData[] = [
  { day: '–ü–ù', cycles: 8, maxCycles: 12 },
  { day: '–í–¢', cycles: 6, maxCycles: 12 },
  { day: '–°–†', cycles: 10, maxCycles: 12 },
  { day: '–ß–¢', cycles: 12, maxCycles: 12 },
  { day: '–ü–¢', cycles: 9, maxCycles: 12 },
  { day: '–°–ë', cycles: 4, maxCycles: 12 },
  { day: '–í–°', cycles: 7, maxCycles: 12 },
];

const achievements = [
  { id: 1, title: '–ü–ï–†–í–´–ô –¶–ò–ö–õ', description: '–ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª Noowing', earned: true },
  { id: 2, title: '–ù–ï–î–ï–õ–Ø –°–ò–õ–´', description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ Noowing', earned: true },
  { id: 3, title: '–ú–ï–°–Ø–¶ –†–ò–¢–ú–ê', description: '30 –¥–Ω–µ–π Noowing', earned: false },
  { id: 4, title: '–≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ò–ô –í–û–ò–ù', description: '100 –∞–∫—Ç–∏–≤–∞—Ü–∏–π', earned: true },
  { id: 5, title: '–ú–ê–°–¢–ï–† –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–ò', description: '500 —Ü–∏–∫–ª–æ–≤ —Ä–∞–±–æ—Ç—ã', earned: false },
];

export default function StatsTab() {
  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'year'>('week');

  const statCards: StatCard[] = [
    {
      title: '–í–°–ï–ì–û –¶–ò–ö–õ–û–í',
      value: '156',
      subtitle: '+12 –ù–ê –≠–¢–û–ô –ù–ï–î–ï–õ–ï',
      icon: Brain,
      color: '#FF6B35',
      gradient: ['#FF6B35', '#E55A2B'],
      onPress: () => Alert.alert('–¶–∏–∫–ª—ã —Ä–∞–±–æ—Ç—ã', '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ 156 —Ü–∏–∫–ª–æ–≤ –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã! –ö–∞–∂–¥—ã–π —Ü–∏–∫–ª –¥–ª–∏—Ç—Å—è 45 –º–∏–Ω—É—Ç.')
    },
    {
      title: '–í–†–ï–ú–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò',
      value: '5–ß 12–ú',
      subtitle: '–°–ï–ì–û–î–ù–Ø',
      icon: Clock,
      color: '#FF6B35',
      gradient: ['#FF6B35', '#E55A2B'],
      onPress: () => Alert.alert('–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–°–µ–≥–æ–¥–Ω—è –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ 5 —á–∞—Å–æ–≤ 12 –º–∏–Ω—É—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!')
    },
    {
      title: '–ê–ö–¢–ò–í–ê–¶–ò–ô',
      value: '312',
      subtitle: '–í–°–ï–ì–û –í–´–ü–û–õ–ù–ï–ù–û',
      icon: Activity,
      color: '#FF6B35',
      gradient: ['#FF6B35', '#E55A2B'],
      onPress: () => Alert.alert('–§–∏–∑–∏—á–µ—Å–∫–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏', '–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 312 –¥–≤—É—Ö–º–∏–Ω—É—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!')
    },
    {
      title: '–¢–ï–ö–£–©–ê–Ø –°–ï–†–ò–Ø',
      value: '7 –î–ù–ï–ô',
      subtitle: '–õ–£–ß–®–ê–Ø: 14 –î–ù–ï–ô',
      icon: TrendingUp,
      color: '#FF6B35',
      gradient: ['#FF6B35', '#E55A2B'],
      onPress: () => Alert.alert('–°–µ—Ä–∏—è', '–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 14 –¥–Ω–µ–π.')
    },
  ];

  const periods = [
    { key: 'week', label: '–ù–ï–î–ï–õ–Ø' },
    { key: 'month', label: '–ú–ï–°–Ø–¶' },
    { key: 'year', label: '–ì–û–î' },
  ];

  const shareStats = () => {
    Alert.alert(
      '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π',
      '–•–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –≤ Noowing?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        { text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', onPress: () => Alert.alert('–£—Å–ø–µ—Ö!', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!') }
      ]
    );
  };

  const showWeeklyChart = () => {
    const totalCycles = weekData.reduce((sum, day) => sum + day.cycles, 0);
    const avgCycles = Math.round(totalCycles / weekData.length);
    Alert.alert(
      '–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
      `–í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: ${totalCycles}\n–°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: ${avgCycles}\n–õ—É—á—à–∏–π –¥–µ–Ω—å: –ß–µ—Ç–≤–µ—Ä–≥ (12 —Ü–∏–∫–ª–æ–≤)`
    );
  };

  const showAchievement = (achievement: typeof achievements[0]) => {
    Alert.alert(
      achievement.title,
      achievement.description + (achievement.earned ? '\n\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!' : '\n\nüîí –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'),
      [{ text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' }]
    );
  };

  return (
    <View style={styles.container}>
      <SafeAreaView style={styles.safeArea}>
        <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
          <View style={styles.content}>
            {/* Header */}
            <View style={styles.header}>
              <View>
                <Text style={styles.title}>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</Text>
                <Text style={styles.subtitle}>–¢–í–û–ô –ü–†–û–ì–†–ï–°–° –í NOOWING</Text>
              </View>
              <TouchableOpacity style={styles.shareButton} onPress={shareStats}>
                <Share2 size={20} color="#FF6B35" strokeWidth={1.5} />
              </TouchableOpacity>
            </View>

            {/* Period Selector */}
            <View style={styles.periodSelector}>
              {periods.map((period) => (
                <TouchableOpacity
                  key={period.key}
                  style={[
                    styles.periodButton,
                    selectedPeriod === period.key && styles.periodButtonActive
                  ]}
                  onPress={() => setSelectedPeriod(period.key as any)}
                >
                  <Text style={[
                    styles.periodText,
                    selectedPeriod === period.key && styles.periodTextActive
                  ]}>
                    {period.label}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>

            {/* Stats Cards */}
            <View style={styles.statsGrid}>
              {statCards.map((stat, index) => (
                <TouchableOpacity 
                  key={index} 
                  style={styles.statCard}
                  onPress={stat.onPress}
                >
                  <View style={styles.statCardContent}>
                    <View style={styles.statCardHeader}>
                      <stat.icon size={24} color="#FF6B35" strokeWidth={1.5} />
                      <Text style={styles.statCardTitle}>{stat.title}</Text>
                    </View>
                    <Text style={styles.statCardValue}>{stat.value}</Text>
                    <Text style={styles.statCardSubtitle}>{stat.subtitle}</Text>
                  </View>
                </TouchableOpacity>
              ))}
            </View>

            {/* Weekly Chart */}
            <TouchableOpacity style={styles.chartContainer} onPress={showWeeklyChart}>
              <View style={styles.chartHeader}>
                <Text style={styles.chartTitle}>–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –ù–ï–î–ï–õ–Æ</Text>
                <BarChart3 size={20} color="#FF6B35" strokeWidth={1.5} />
              </View>
              <View style={styles.chart}>
                {weekData.map((day, index) => (
                  <TouchableOpacity 
                    key={index} 
                    style={styles.chartBar}
                    onPress={() => Alert.alert(day.day, `–¶–∏–∫–ª–æ–≤: ${day.cycles} –∏–∑ ${day.maxCycles}`)}
                  >
                    <View style={styles.barContainer}>
                      <View 
                        style={[
                          styles.bar,
                          { 
                            height: `${(day.cycles / day.maxCycles) * 100}%`,
                            backgroundColor: day.cycles === day.maxCycles ? '#FF6B35' : 'rgba(255, 107, 53, 0.6)'
                          }
                        ]} 
                      />
                    </View>
                    <Text style={styles.barLabel}>{day.day}</Text>
                    <Text style={styles.barValue}>{day.cycles}</Text>
                  </TouchableOpacity>
                ))}
              </View>
            </TouchableOpacity>

            {/* Phase Distribution */}
            <View style={styles.phaseContainer}>
              <Text style={styles.phaseTitle}>–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò</Text>
              <View style={styles.phaseStats}>
                <TouchableOpacity 
                  style={styles.phaseStat}
                  onPress={() => Alert.alert('–†–∞–±–æ—Ç–∞', '–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ 117 —á–∞—Å–æ–≤ –Ω–∞ –≥–ª—É–±–æ–∫—É—é —Ä–∞–±–æ—Ç—É (75% –≤—Ä–µ–º–µ–Ω–∏)')}
                >
                  <View style={styles.phaseIcon}>
                    <Brain size={20} color="#FF6B35" strokeWidth={1.5} />
                  </View>
                  <View style={styles.phaseInfo}>
                    <Text style={styles.phaseLabel}>–†–ê–ë–û–¢–ê</Text>
                    <Text style={styles.phaseValue}>117 –ß–ê–°–û–í</Text>
                  </View>
                  <Text style={styles.phasePercentage}>75%</Text>
                </TouchableOpacity>
                
                <TouchableOpacity 
                  style={styles.phaseStat}
                  onPress={() => Alert.alert('–ê–∫—Ç–∏–≤–∞—Ü–∏—è', '–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ 10.4 —á–∞—Å–∞ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (7% –≤—Ä–µ–º–µ–Ω–∏)')}
                >
                  <View style={styles.phaseIcon}>
                    <Activity size={20} color="#FF6B35" strokeWidth={1.5} />
                  </View>
                  <View style={styles.phaseInfo}>
                    <Text style={styles.phaseLabel}>–ê–ö–¢–ò–í–ê–¶–ò–Ø</Text>
                    <Text style={styles.phaseValue}>10.4 –ß–ê–°–ê</Text>
                  </View>
                  <Text style={styles.phasePercentage}>7%</Text>
                </TouchableOpacity>
                
                <TouchableOpacity 
                  style={styles.phaseStat}
                  onPress={() => Alert.alert('–û—Ç–¥—ã—Ö', '–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ 26 —á–∞—Å–æ–≤ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (18% –≤—Ä–µ–º–µ–Ω–∏)')}
                >
                  <View style={styles.phaseIcon}>
                    <Coffee size={20} color="#FF6B35" strokeWidth={1.5} />
                  </View>
                  <View style={styles.phaseInfo}>
                    <Text style={styles.phaseLabel}>–û–¢–î–´–•</Text>
                    <Text style={styles.phaseValue}>26 –ß–ê–°–û–í</Text>
                  </View>
                  <Text style={styles.phasePercentage}>18%</Text>
                </TouchableOpacity>
              </View>
            </View>

            {/* Achievements */}
            <View style={styles.achievementsContainer}>
              <Text style={styles.achievementsTitle}>–î–û–°–¢–ò–ñ–ï–ù–ò–Ø</Text>
              <View style={styles.achievementsList}>
                {achievements.map((achievement) => (
                  <TouchableOpacity 
                    key={achievement.id} 
                    style={[
                      styles.achievementCard,
                      !achievement.earned && styles.achievementCardLocked
                    ]}
                    onPress={() => showAchievement(achievement)}
                  >
                    <View style={styles.achievementIcon}>
                      <Award 
                        size={24} 
                        color={achievement.earned ? '#FF6B35' : 'rgba(255,255,255,0.2)'} 
                        strokeWidth={1.5} 
                      />
                    </View>
                    <View style={styles.achievementInfo}>
                      <Text style={[
                        styles.achievementTitle,
                        !achievement.earned && styles.achievementTitleLocked
                      ]}>
                        {achievement.title}
                      </Text>
                      <Text style={[
                        styles.achievementDescription,
                        !achievement.earned && styles.achievementDescriptionLocked
                      ]}>
                        {achievement.description}
                      </Text>
                    </View>
                    {achievement.earned && (
                      <View style={styles.achievementBadge}>
                        <Text style={styles.achievementBadgeText}>‚úì</Text>
                      </View>
                    )}
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          </View>
        </ScrollView>
      </SafeAreaView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0A0A0A',
  },
  safeArea: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  content: {
    paddingHorizontal: 24,
    paddingTop: 20,
    paddingBottom: 100,
  },
  header: {
    marginBottom: 24,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
  },
  title: {
    fontSize: 36,
    fontFamily: 'Inter-Bold',
    color: '#FFFFFF',
    letterSpacing: 4,
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: 'rgba(255, 255, 255, 0.5)',
    letterSpacing: 1,
  },
  shareButton: {
    padding: 16,
    backgroundColor: 'rgba(255, 107, 53, 0.08)',
    borderRadius: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 107, 53, 0.2)',
  },
  periodSelector: {
    flexDirection: 'row',
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 25,
    padding: 4,
    marginBottom: 24,
  },
  periodButton: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
    borderRadius: 20,
  },
  periodButtonActive: {
    backgroundColor: '#FF6B35',
  },
  periodText: {
    fontSize: 12,
    fontFamily: 'Inter-SemiBold',
    color: 'rgba(255, 255, 255, 0.6)',
    letterSpacing: 1.5,
  },
  periodTextActive: {
    color: '#000',
  },
  statsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
    marginBottom: 24,
  },
  statCard: {
    width: (width - 60) / 2,
    borderRadius: 20,
    overflow: 'hidden',
  },
  statCardContent: {
    padding: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.08)',
    borderRadius: 20,
  },
  statCardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  statCardTitle: {
    fontSize: 10,
    fontFamily: 'Inter-Medium',
    color: 'rgba(255, 255, 255, 0.7)',
    marginLeft: 8,
    flex: 1,
    letterSpacing: 1,
  },
  statCardValue: {
    fontSize: 28,
    fontFamily: 'Inter-Bold',
    color: '#FFFFFF',
    marginBottom: 4,
    letterSpacing: 1,
  },
  statCardSubtitle: {
    fontSize: 10,
    fontFamily: 'Inter-Regular',
    color: 'rgba(255, 255, 255, 0.5)',
    letterSpacing: 0.5,
  },
  chartContainer: {
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 20,
    padding: 24,
    marginBottom: 24,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.08)',
  },
  chartHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  chartTitle: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
    color: '#FFFFFF',
    letterSpacing: 2,
  },
  chart: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-end',
    height: 120,
  },
  chartBar: {
    alignItems: 'center',
    flex: 1,
  },
  barContainer: {
    height: 80,
    width: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 10,
    justifyContent: 'flex-end',
    marginBottom: 8,
  },
  bar: {
    width: '100%',
    borderRadius: 10,
    minHeight: 4,
  },
  barLabel: {
    fontSize: 10,
    fontFamily: 'Inter-SemiBold',
    color: 'rgba(255, 255, 255, 0.6)',
    marginBottom: 4,
    letterSpacing: 1,
  },
  barValue: {
    fontSize: 16,
    fontFamily: 'Inter-Bold',
    color: '#FFFFFF',
  },
  phaseContainer: {
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 20,
    padding: 24,
    marginBottom: 24,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.08)',
  },
  phaseTitle: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
    color: '#FFFFFF',
    letterSpacing: 2,
    marginBottom: 16,
  },
  phaseStats: {
    gap: 16,
  },
  phaseStat: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  phaseIcon: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: 'rgba(255, 107, 53, 0.08)',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 16,
  },
  phaseInfo: {
    flex: 1,
  },
  phaseLabel: {
    fontSize: 12,
    fontFamily: 'Inter-Medium',
    color: 'rgba(255, 255, 255, 0.7)',
    marginBottom: 2,
    letterSpacing: 1,
  },
  phaseValue: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#FFFFFF',
    letterSpacing: 0.5,
  },
  phasePercentage: {
    fontSize: 18,
    fontFamily: 'Inter-Bold',
    color: '#FF6B35',
  },
  achievementsContainer: {
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 20,
    padding: 24,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.08)',
  },
  achievementsTitle: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
    color: '#FFFFFF',
    letterSpacing: 2,
    marginBottom: 16,
  },
  achievementsList: {
    gap: 12,
  },
  achievementCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 16,
    padding: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.08)',
  },
  achievementCardLocked: {
    opacity: 0.4,
  },
  achievementIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: 'rgba(255, 107, 53, 0.08)',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 16,
  },
  achievementInfo: {
    flex: 1,
  },
  achievementTitle: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
    color: '#FFFFFF',
    marginBottom: 4,
    letterSpacing: 1,
  },
  achievementTitleLocked: {
    color: 'rgba(255, 255, 255, 0.4)',
  },
  achievementDescription: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: 'rgba(255, 255, 255, 0.6)',
  },
  achievementDescriptionLocked: {
    color: 'rgba(255, 255, 255, 0.3)',
  },
  achievementBadge: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: '#FF6B35',
    alignItems: 'center',
    justifyContent: 'center',
  },
  achievementBadgeText: {
    fontSize: 14,
    fontFamily: 'Inter-Bold',
    color: '#000',
  },
});