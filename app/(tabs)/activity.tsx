import React, { useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, Image, Alert } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Play, Clock, Zap, Target, CircleCheck as CheckCircle, Star } from 'lucide-react-native';

interface Exercise {
  id: string;
  name: string;
  duration: string;
  difficulty: 'easy' | 'medium' | 'hard';
  category: string;
  image: string;
  description: string;
  completed?: boolean;
  instructions: string[];
}

const exercises: Exercise[] = [
  {
    id: '1',
    name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è',
    duration: '2 –º–∏–Ω',
    difficulty: 'easy',
    category: '–ù–æ–≥–∏',
    image: 'https://images.pexels.com/photos/4162449/pexels-photo-4162449.jpeg?auto=compress&cs=tinysrgb&w=400',
    description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º—ã—à—Ü –Ω–æ–≥',
    instructions: [
      '–í—Å—Ç–∞–Ω—å—Ç–µ –ø—Ä—è–º–æ, –Ω–æ–≥–∏ –Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á',
      '–ú–µ–¥–ª–µ–Ω–Ω–æ –æ–ø—É—Å—Ç–∏—Ç–µ—Å—å, –∫–∞–∫ –±—É–¥—Ç–æ —Å–∞–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—É–ª',
      '–î–µ—Ä–∂–∏—Ç–µ —Å–ø–∏–Ω—É –ø—Ä—è–º–æ, –∫–æ–ª–µ–Ω–∏ –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –Ω–æ—Å–∫–∏',
      '–ü–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 10-15 —Ä–∞–∑'
    ]
  },
  {
    id: '2',
    name: '–û—Ç–∂–∏–º–∞–Ω–∏—è',
    duration: '2 –º–∏–Ω',
    difficulty: 'medium',
    category: '–ì—Ä—É–¥—å',
    image: 'https://images.pexels.com/photos/4162438/pexels-photo-4162438.jpeg?auto=compress&cs=tinysrgb&w=400',
    description: '–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞',
    instructions: [
      '–ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª–µ–∂–∞, —Ä—É–∫–∏ –Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á',
      '–¢–µ–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–µ–π',
      '–ú–µ–¥–ª–µ–Ω–Ω–æ –æ–ø—É—Å—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–ª—É',
      '–û—Ç—Ç–æ–ª–∫–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 8-12 —Ä–∞–∑'
    ]
  },
  {
    id: '3',
    name: '–ü–ª–∞–Ω–∫–∞',
    duration: '2 –º–∏–Ω',
    difficulty: 'medium',
    category: '–ö–æ—Ä',
    image: 'https://images.pexels.com/photos/4162451/pexels-photo-4162451.jpeg?auto=compress&cs=tinysrgb&w=400',
    description: '–°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º—ã—à—Ü –∫–æ—Ä–∞',
    instructions: [
      '–ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª–µ–∂–∞ –Ω–∞ –ø—Ä–µ–¥–ø–ª–µ—á—å—è—Ö',
      '–¢–µ–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–µ–π',
      '–ù–∞–ø—Ä—è–≥–∏—Ç–µ –º—ã—à—Ü—ã –∂–∏–≤–æ—Ç–∞',
      '–î–µ—Ä–∂–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é 30-60 —Å–µ–∫—É–Ω–¥',
      '–î—ã—à–∏—Ç–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ'
    ]
  },
  {
    id: '4',
    name: '–ü—Ä—ã–∂–∫–∏',
    duration: '2 –º–∏–Ω',
    difficulty: 'hard',
    category: '–ö–∞—Ä–¥–∏–æ',
    image: 'https://images.pexels.com/photos/4162450/pexels-photo-4162450.jpeg?auto=compress&cs=tinysrgb&w=400',
    description: '–ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ –¥–ª—è –∫–∞—Ä–¥–∏–æ –Ω–∞–≥—Ä—É–∑–∫–∏',
    instructions: [
      '–í—Å—Ç–∞–Ω—å—Ç–µ –ø—Ä—è–º–æ, –Ω–æ–≥–∏ –≤–º–µ—Å—Ç–µ',
      '–ü—Ä—ã–≥–Ω–∏—Ç–µ, —Ä–∞–∑–≤–æ–¥—è –Ω–æ–≥–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã',
      '–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–Ω–∏–º–∏—Ç–µ —Ä—É–∫–∏ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π',
      '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 15-20 —Ä–∞–∑'
    ]
  },
  {
    id: '5',
    name: '–†–∞—Å—Ç—è–∂–∫–∞ —à–µ–∏',
    duration: '2 –º–∏–Ω',
    difficulty: 'easy',
    category: '–†–∞—Å—Ç—è–∂–∫–∞',
    image: 'https://images.pexels.com/photos/4056723/pexels-photo-4056723.jpeg?auto=compress&cs=tinysrgb&w=400',
    description: '–ú—è–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –≤ —à–µ–µ',
    instructions: [
      '–°—è–¥—å—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–Ω—å—Ç–µ –ø—Ä—è–º–æ',
      '–ú–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–∫–ª–æ–Ω–∏—Ç–µ –≥–æ–ª–æ–≤—É –≤–ø—Ä–∞–≤–æ',
      '–ó–∞–¥–µ—Ä–∂–∏—Ç–µ—Å—å –Ω–∞ 15 —Å–µ–∫—É–Ω–¥',
      '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É',
      '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –≥–æ–ª–æ–≤–æ–π'
    ]
  },
  {
    id: '6',
    name: '–í—ã–ø–∞–¥—ã',
    duration: '2 –º–∏–Ω',
    difficulty: 'medium',
    category: '–ù–æ–≥–∏',
    image: 'https://images.pexels.com/photos/4162452/pexels-photo-4162452.jpeg?auto=compress&cs=tinysrgb&w=400',
    description: '–í—ã–ø–∞–¥—ã –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –º—ã—à—Ü –Ω–æ–≥ –∏ —è–≥–æ–¥–∏—Ü',
    instructions: [
      '–í—Å—Ç–∞–Ω—å—Ç–µ –ø—Ä—è–º–æ, –Ω–æ–≥–∏ –Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á',
      '–°–¥–µ–ª–∞–π—Ç–µ —à–∞–≥ –≤–ø–µ—Ä–µ–¥ –æ–¥–Ω–æ–π –Ω–æ–≥–æ–π',
      '–û–ø—É—Å—Ç–∏—Ç–µ—Å—å, —Å–≥–∏–±–∞—è –æ–±–∞ –∫–æ–ª–µ–Ω–∞ –ø–æ–¥ 90¬∞',
      '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 8-10 —Ä–∞–∑ –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É'
    ]
  },
];

const difficultyColors = {
  easy: '#4ADE80',
  medium: '#FF6B35',
  hard: '#EF4444',
};

const difficultyLabels = {
  easy: '–õ–ï–ì–ö–û',
  medium: '–°–†–ï–î–ù–ï',
  hard: '–°–õ–û–ñ–ù–û',
};

export default function ActivityTab() {
  const [selectedCategory, setSelectedCategory] = useState<string>('–í–°–ï');
  const [completedExercises, setCompletedExercises] = useState<Set<string>>(new Set());

  const categories = ['–í–°–ï', '–ù–û–ì–ò', '–ì–†–£–î–¨', '–ö–û–†', '–ö–ê–†–î–ò–û', '–†–ê–°–¢–Ø–ñ–ö–ê'];

  const filteredExercises = exercises.filter(exercise => 
    selectedCategory === '–í–°–ï' || exercise.category.toUpperCase() === selectedCategory
  );

  const toggleExerciseCompletion = (exerciseId: string) => {
    const newCompleted = new Set(completedExercises);
    if (newCompleted.has(exerciseId)) {
      newCompleted.delete(exerciseId);
    } else {
      newCompleted.add(exerciseId);
    }
    setCompletedExercises(newCompleted);
  };

  const startExercise = (exercise: Exercise) => {
    Alert.alert(
      exercise.name,
      `–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å ${exercise.name}?\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n${exercise.instructions.join('\n')}`,
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        { 
          text: '–ù–∞—á–∞—Ç—å', 
          onPress: () => {
            Alert.alert(
              '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!',
              `–í—ã–ø–æ–ª–Ω—è–π ${exercise.name} –≤ —Ç–µ—á–µ–Ω–∏–µ ${exercise.duration}`,
              [
                { 
                  text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å', 
                  onPress: () => {
                    toggleExerciseCompletion(exercise.id);
                    Alert.alert('–û—Ç–ª–∏—á–Ω–æ!', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ');
                  }
                }
              ]
            );
          }
        }
      ]
    );
  };

  const showExerciseDetails = (exercise: Exercise) => {
    Alert.alert(
      exercise.name,
      `${exercise.description}\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n${exercise.instructions.join('\n')}`,
      [{ text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' }]
    );
  };

  return (
    <View style={styles.container}>
      <SafeAreaView style={styles.safeArea}>
        <View style={styles.content}>
          {/* Header */}
          <View style={styles.header}>
            <Text style={styles.title}>–ê–ö–¢–ò–í–ê–¶–ò–Ø</Text>
            <Text style={styles.subtitle}>–§–ò–ó–ò–ß–ï–°–ö–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –î–õ–Ø 2-–ú–ò–ù–£–¢–ù–´–• –ê–ö–¢–ò–í–ê–¶–ò–ô</Text>
          </View>

          {/* Stats */}
          <View style={styles.statsContainer}>
            <TouchableOpacity style={styles.statCard} onPress={() => {
              Alert.alert('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ${completedExercises.size} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è!`);
            }}>
              <Zap size={18} color="#FF6B35" strokeWidth={1.5} />
              <Text style={styles.statNumber}>{completedExercises.size}</Text>
              <Text style={styles.statLabel}>–í–´–ü–û–õ–ù–ï–ù–û</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.statCard} onPress={() => {
              Alert.alert('–î–æ—Å—Ç—É–ø–Ω–æ', `${exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é`);
            }}>
              <Target size={18} color="#FF6B35" strokeWidth={1.5} />
              <Text style={styles.statNumber}>{exercises.length}</Text>
              <Text style={styles.statLabel}>–î–û–°–¢–£–ü–ù–û</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.statCard} onPress={() => {
              Alert.alert('–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', `–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ ${completedExercises.size * 2} –º–∏–Ω—É—Ç –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è`);
            }}>
              <Clock size={18} color="#FF6B35" strokeWidth={1.5} />
              <Text style={styles.statNumber}>{completedExercises.size * 2}</Text>
              <Text style={styles.statLabel}>–ú–ò–ù–£–¢</Text>
            </TouchableOpacity>
          </View>

          {/* Category Filter */}
          <ScrollView 
            horizontal 
            showsHorizontalScrollIndicator={false}
            style={styles.categoryScroll}
            contentContainerStyle={styles.categoryContainer}
          >
            {categories.map((category) => (
              <TouchableOpacity
                key={category}
                style={[
                  styles.categoryButton,
                  selectedCategory === category && styles.categoryButtonActive
                ]}
                onPress={() => setSelectedCategory(category)}
              >
                <Text style={[
                  styles.categoryText,
                  selectedCategory === category && styles.categoryTextActive
                ]}>
                  {category}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>

          {/* Exercise List */}
          <ScrollView 
            style={styles.exerciseList}
            showsVerticalScrollIndicator={false}
          >
            {filteredExercises.map((exercise) => (
              <TouchableOpacity 
                key={exercise.id} 
                style={styles.exerciseCard}
                onPress={() => showExerciseDetails(exercise)}
              >
                <Image source={{ uri: exercise.image }} style={styles.exerciseImage} />
                
                <View style={styles.exerciseContent}>
                  <View style={styles.exerciseHeader}>
                    <Text style={styles.exerciseName}>{exercise.name.toUpperCase()}</Text>
                    <TouchableOpacity
                      style={styles.completeButton}
                      onPress={(e) => {
                        e.stopPropagation();
                        toggleExerciseCompletion(exercise.id);
                      }}
                    >
                      {completedExercises.has(exercise.id) ? (
                        <CheckCircle size={20} color="#FF6B35" strokeWidth={1.5} />
                      ) : (
                        <View style={styles.incompleteCircle} />
                      )}
                    </TouchableOpacity>
                  </View>
                  
                  <Text style={styles.exerciseDescription}>{exercise.description}</Text>
                  
                  <View style={styles.exerciseFooter}>
                    <View style={styles.exerciseInfo}>
                      <View style={styles.exerciseTag}>
                        <Text style={styles.exerciseCategory}>{exercise.category.toUpperCase()}</Text>
                      </View>
                      <View style={[
                        styles.difficultyTag,
                        { backgroundColor: `${difficultyColors[exercise.difficulty]}15` }
                      ]}>
                        <Text style={[
                          styles.difficultyText,
                          { color: difficultyColors[exercise.difficulty] }
                        ]}>
                          {difficultyLabels[exercise.difficulty]}
                        </Text>
                      </View>
                    </View>
                    
                    <TouchableOpacity 
                      style={styles.startButton}
                      onPress={(e) => {
                        e.stopPropagation();
                        startExercise(exercise);
                      }}
                    >
                      <LinearGradient
                        colors={['#FF6B35', '#E55A2B']}
                        style={styles.startButtonGradient}
                      >
                        <Play size={14} color="#000" strokeWidth={1.5} />
                        <Text style={styles.startButtonText}>{exercise.duration}</Text>
                      </LinearGradient>
                    </TouchableOpacity>
                  </View>
                </View>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>
      </SafeAreaView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0A0A0A',
  },
  safeArea: {
    flex: 1,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 10,
  },
  header: {
    marginBottom: 20,
  },
  title: {
    fontSize: 36,
    fontFamily: 'Inter-Bold',
    color: '#FFFFFF',
    letterSpacing: 4,
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: 'rgba(255, 255, 255, 0.5)',
    lineHeight: 16,
    letterSpacing: 1,
  },
  statsContainer: {
    flexDirection: 'row',
    gap: 8,
    marginBottom: 20,
  },
  statCard: {
    flex: 1,
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 20,
    padding: 16,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.08)',
  },
  statNumber: {
    fontSize: 24,
    fontFamily: 'Inter-Bold',
    color: '#FFFFFF',
    marginTop: 8,
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 9,
    fontFamily: 'Inter-Medium',
    color: 'rgba(255, 255, 255, 0.5)',
    letterSpacing: 1.5,
  },
  categoryScroll: {
    marginBottom: 20,
    maxHeight: 50,
  },
  categoryContainer: {
    paddingRight: 20,
    gap: 8,
    alignItems: 'center',
  },
  categoryButton: {
    paddingVertical: 8,
    paddingHorizontal: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.08)',
    minWidth: 60,
    alignItems: 'center',
  },
  categoryButtonActive: {
    backgroundColor: '#FF6B35',
    borderColor: '#FF6B35',
  },
  categoryText: {
    fontSize: 10,
    fontFamily: 'Inter-Medium',
    color: 'rgba(255, 255, 255, 0.6)',
    letterSpacing: 1,
  },
  categoryTextActive: {
    color: '#000',
  },
  exerciseList: {
    flex: 1,
  },
  exerciseCard: {
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    borderRadius: 20,
    marginBottom: 12,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.08)',
  },
  exerciseImage: {
    width: '100%',
    height: 100,
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
  },
  exerciseContent: {
    padding: 16,
  },
  exerciseHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  exerciseName: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#FFFFFF',
    flex: 1,
    letterSpacing: 1,
  },
  completeButton: {
    padding: 4,
  },
  incompleteCircle: {
    width: 20,
    height: 20,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: 'rgba(255, 255, 255, 0.2)',
  },
  exerciseDescription: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: 'rgba(255, 255, 255, 0.6)',
    lineHeight: 16,
    marginBottom: 12,
  },
  exerciseFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  exerciseInfo: {
    flexDirection: 'row',
    gap: 6,
    flex: 1,
  },
  exerciseTag: {
    backgroundColor: 'rgba(255, 255, 255, 0.08)',
    borderRadius: 12,
    paddingVertical: 4,
    paddingHorizontal: 8,
  },
  exerciseCategory: {
    fontSize: 9,
    fontFamily: 'Inter-Medium',
    color: 'rgba(255, 255, 255, 0.7)',
    letterSpacing: 1,
  },
  difficultyTag: {
    borderRadius: 12,
    paddingVertical: 4,
    paddingHorizontal: 8,
  },
  difficultyText: {
    fontSize: 9,
    fontFamily: 'Inter-Medium',
    letterSpacing: 1,
  },
  startButton: {
    borderRadius: 12,
    overflow: 'hidden',
  },
  startButtonGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    gap: 4,
  },
  startButtonText: {
    fontSize: 12,
    fontFamily: 'Inter-SemiBold',
    color: '#000',
    letterSpacing: 0.5,
  },
});