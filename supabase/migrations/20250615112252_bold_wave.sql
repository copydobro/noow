/*
  # Achievements and Statistics System

  1. New Tables
    - `achievements` - Available achievements
      - `id` (uuid, primary key)
      - `name` (text)
      - `description` (text)
      - `icon` (text)
      - `criteria_type` (text)
      - `criteria_value` (integer)
      - `is_active` (boolean)
      - `created_at` (timestamptz)

    - `user_achievements` - User earned achievements
      - `id` (uuid, primary key)
      - `user_id` (uuid, references user_profiles)
      - `achievement_id` (uuid, references achievements)
      - `earned_at` (timestamptz)
      - `progress` (integer)

    - `user_statistics` - Aggregated user statistics
      - `id` (uuid, primary key)
      - `user_id` (uuid, references user_profiles)
      - `total_cycles` (integer)
      - `total_work_time` (integer)
      - `total_activation_time` (integer)
      - `total_rest_time` (integer)
      - `current_streak` (integer)
      - `best_streak` (integer)
      - `last_activity_date` (date)
      - `updated_at` (timestamptz)

  2. Security
    - Enable RLS on all tables
    - Add appropriate policies
*/

-- Create achievements table
CREATE TABLE IF NOT EXISTS achievements (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text NOT NULL,
  icon text DEFAULT 'üèÜ',
  criteria_type text NOT NULL CHECK (criteria_type IN ('cycles_completed', 'streak_days', 'total_time', 'activations_completed')),
  criteria_value integer NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamptz DEFAULT now()
);

-- Create user achievements table
CREATE TABLE IF NOT EXISTS user_achievements (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
  achievement_id uuid NOT NULL REFERENCES achievements(id) ON DELETE CASCADE,
  earned_at timestamptz DEFAULT now(),
  progress integer DEFAULT 0,
  UNIQUE(user_id, achievement_id)
);

-- Create user statistics table
CREATE TABLE IF NOT EXISTS user_statistics (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL REFERENCES user_profiles(id) ON DELETE CASCADE,
  total_cycles integer DEFAULT 0,
  total_work_time integer DEFAULT 0,
  total_activation_time integer DEFAULT 0,
  total_rest_time integer DEFAULT 0,
  current_streak integer DEFAULT 0,
  best_streak integer DEFAULT 0,
  last_activity_date date,
  updated_at timestamptz DEFAULT now(),
  UNIQUE(user_id)
);

-- Enable Row Level Security
ALTER TABLE achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_statistics ENABLE ROW LEVEL SECURITY;

-- Policies for achievements (public read)
CREATE POLICY "Anyone can view achievements"
  ON achievements
  FOR SELECT
  TO authenticated
  USING (is_active = true);

-- Policies for user_achievements
CREATE POLICY "Users can view own achievements"
  ON user_achievements
  FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can insert own achievements"
  ON user_achievements
  FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

-- Policies for user_statistics
CREATE POLICY "Users can view own statistics"
  ON user_statistics
  FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can insert own statistics"
  ON user_statistics
  FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update own statistics"
  ON user_statistics
  FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid())
  WITH CHECK (user_id = auth.uid());

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_user_achievements_user_id ON user_achievements(user_id);
CREATE INDEX IF NOT EXISTS idx_user_statistics_user_id ON user_statistics(user_id);

-- Create trigger for user_statistics updated_at
CREATE TRIGGER handle_user_statistics_updated_at
  BEFORE UPDATE ON user_statistics
  FOR EACH ROW
  EXECUTE FUNCTION handle_updated_at();

-- Insert default achievements
INSERT INTO achievements (name, description, criteria_type, criteria_value) VALUES
  ('–ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª', '–ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª Noowing', 'cycles_completed', 1),
  ('–ù–µ–¥–µ–ª—è —Å–∏–ª—ã', '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ Noowing', 'streak_days', 7),
  ('–ú–µ—Å—è—Ü —Ä–∏—Ç–º–∞', '30 –¥–Ω–µ–π Noowing', 'streak_days', 30),
  ('–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∏–Ω', '100 –∞–∫—Ç–∏–≤–∞—Ü–∏–π', 'activations_completed', 100),
  ('–ú–∞—Å—Ç–µ—Ä –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏', '500 —Ü–∏–∫–ª–æ–≤ —Ä–∞–±–æ—Ç—ã', 'cycles_completed', 500),
  ('–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü', '100 —á–∞—Å–æ–≤ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏', 'total_time', 360000),
  ('–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ', '14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', 'streak_days', 14),
  ('–°–æ—Ç–Ω—è', '100 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤', 'cycles_completed', 100)
ON CONFLICT DO NOTHING;